{"ast":null,"code":"var _jsxFileName = \"/home/ganesan/Desktop/chatgpt-app/frontend/src/components/displayData.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport axios from 'axios';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Display = () => {\n  _s();\n  const [formats, setFormats] = useState([]); // Initialize formats as an empty array\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    fetchFormats();\n  }, []);\n  const fetchFormats = async () => {\n    try {\n      const response = await axios.get('http://localhost:9000/aliens');\n      setFormats(response.data);\n      setLoading(false);\n    } catch (error) {\n      console.error('Error retrieving data:', error);\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"styled-table \",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Key\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Value\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: formats.map(format => {\n          const {\n            query\n          } = format;\n          const {\n            query_string\n          } = query;\n          const {\n            query: keyValue\n          } = query_string;\n          const keys = Object.keys(keyValue);\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: keys.map(key => /*#__PURE__*/_jsxDEV(React.Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: key\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 63,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: keyValue[key]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 65,\n                columnNumber: 25\n              }, this)]\n            }, key, true, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 23\n            }, this))\n          }, format._id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 19\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 7\n  }, this);\n};\n_s(Display, \"ft/cDekIiBM/L+68UmAvuKz9UIY=\");\n_c = Display;\nexport default Display;\nvar _c;\n$RefreshReg$(_c, \"Display\");","map":{"version":3,"names":["React","axios","useState","useEffect","jsxDEV","_jsxDEV","Display","_s","formats","setFormats","loading","setLoading","fetchFormats","response","get","data","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","format","query","query_string","keyValue","keys","Object","key","Fragment","_id","_c","$RefreshReg$"],"sources":["/home/ganesan/Desktop/chatgpt-app/frontend/src/components/displayData.js"],"sourcesContent":["import React from 'react';\nimport axios from 'axios'\nimport { useState } from 'react';\nimport { useEffect } from 'react';\n\n\n\n  \n  \n  const Display = () => {\n    const [formats, setFormats] = useState([]); // Initialize formats as an empty array\n    const [loading, setLoading] = useState(true);\n  \n    useEffect(() => {\n      fetchFormats();\n    }, []);\n  \n    const fetchFormats = async () => {\n      try {\n        const response = await axios.get('http://localhost:9000/aliens');\n        setFormats(response.data);\n        setLoading(false);\n      } catch (error) {\n        console.error('Error retrieving data:', error);\n        setLoading(false);\n      }\n    };\n  \n    return (\n      <div>\n\n        {loading ? (\n\n          <p>Loading...</p>\n\n        ) : (\n          \n          <table className='styled-table '>\n            <thead>\n              <tr>\n                <th>Key</th>\n                <th>Value</th>\n              </tr>\n            </thead>\n            <tbody>\n              {formats.map((format) => {\n\n                const { query } = format;\n\n                const { query_string } = query;\n\n                const { query: keyValue } = query_string;\n\n                const keys = Object.keys(keyValue);\n  \n                return (\n                  <tr key={format._id}>\n\n                    {keys.map((key) => (\n\n                      <React.Fragment key={key}>\n\n                        <td>{key}</td>\n\n                        <td>{keyValue[key]}</td>\n\n                      </React.Fragment>\n                    ))}\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        )}\n      </div>\n    );\n  };\n \nexport default Display\n\n\n\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
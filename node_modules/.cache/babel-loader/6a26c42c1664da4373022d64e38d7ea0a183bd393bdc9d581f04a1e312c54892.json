{"ast":null,"code":"var _jsxFileName = \"/home/ganesan/Desktop/chatgpt-app/frontend/src/components/Order.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Order() {\n  _s();\n  const [inputValue, setInputValue] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  const [formattedData, setFormattedData] = useState(null);\n  const [copied, setCopied] = useState(false);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const [key, concordinateValue] = inputValue.split('');\n    try {\n      const response = await axios.get('http://localhost:9000/aliens');\n      console.log(response);\n      const concordinate = response.data.find(item => {\n        Object.keys(item.query.query_string.query).some(queryKey => queryKey.toLowerCase() === key.toLowerCase());\n        if (concordinate) {\n          const formattedJson = {\n            query: {\n              query_string: {\n                query: `${concordinate.query.query_string.query[key.toLowerCase()] || concordinate.query.query_string.query[key.toUpperCase()]}:${concordinateValue}`\n              }\n            }\n          };\n          setFormattedData(JSON.stringify(formattedJson, null, 2));\n          setErrorMessage('');\n          setInputValue('');\n        } else {\n          setFormattedData(null);\n          setErrorMessage(\"Key Not Found\");\n        }\n      });\n    } catch (error) {\n      setFormattedData(null);\n      setErrorMessage('Error Retrieving Data');\n    }\n  };\n  const handleInputChange = e => {\n    setInputValue(e.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}\n_s(Order, \"whQbmLWDVdycTFDkddaMszqcQuI=\");\n_c = Order;\nvar _c;\n$RefreshReg$(_c, \"Order\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","Order","_s","inputValue","setInputValue","errorMessage","setErrorMessage","formattedData","setFormattedData","copied","setCopied","handleSubmit","e","preventDefault","key","concordinateValue","split","response","get","console","log","concordinate","data","find","item","Object","keys","query","query_string","some","queryKey","toLowerCase","formattedJson","toUpperCase","JSON","stringify","error","handleInputChange","target","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/ganesan/Desktop/chatgpt-app/frontend/src/components/Order.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\n\n\nexport default function Order() {\n\n  const [inputValue, setInputValue] = useState('');\n\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const [formattedData, setFormattedData] = useState(null);\n\n  const [copied, setCopied] = useState(false);\n\n  const handleSubmit = async (e) => {\n\n    e.preventDefault()\n    const [key, concordinateValue] = inputValue.split('')\n\n\n    try {\n\n\n      const response = await axios.get('http://localhost:9000/aliens');\n      console.log(response)\n\n      const concordinate = response.data.find((item => {\n\n        Object.keys(item.query.query_string.query).some((queryKey) => queryKey.toLowerCase() === key.toLowerCase()\n\n        );\n\n        if (concordinate) {\n\n          const formattedJson = {\n\n            query: {\n\n              query_string: {\n\n                query:`${concordinate.query.query_string.query[key.toLowerCase()] || concordinate.query.query_string.query[key.toUpperCase()]}:${concordinateValue}`,\n\n              },\n            },\n          };\n\n          setFormattedData(JSON.stringify(formattedJson, null, 2))\n\n          setErrorMessage('')\n\n          setInputValue('')\n\n\n        }else{\n          setFormattedData(null)\n\n          setErrorMessage(\"Key Not Found\")\n        }\n\n\n\n      }))\n\n    } catch (error) {\n\n      setFormattedData(null)\n\n      setErrorMessage('Error Retrieving Data')\n    }\n  }\n\n  const handleInputChange =(e)=>{\n\n    setInputValue(e.target.value)\n    \n  }\n\n  return (\n\n    <div>\n\n    </div>\n  )\n}\n\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAG1B,eAAe,SAASC,KAAKA,CAAA,EAAG;EAAAC,EAAA;EAE9B,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAEhD,MAAM,CAACQ,YAAY,EAAEC,eAAe,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAEpD,MAAM,CAACU,aAAa,EAAEC,gBAAgB,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAExD,MAAM,CAACY,MAAM,EAAEC,SAAS,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EAE3C,MAAMc,YAAY,GAAG,MAAOC,CAAC,IAAK;IAEhCA,CAAC,CAACC,cAAc,EAAE;IAClB,MAAM,CAACC,GAAG,EAAEC,iBAAiB,CAAC,GAAGZ,UAAU,CAACa,KAAK,CAAC,EAAE,CAAC;IAGrD,IAAI;MAGF,MAAMC,QAAQ,GAAG,MAAMnB,KAAK,CAACoB,GAAG,CAAC,8BAA8B,CAAC;MAChEC,OAAO,CAACC,GAAG,CAACH,QAAQ,CAAC;MAErB,MAAMI,YAAY,GAAGJ,QAAQ,CAACK,IAAI,CAACC,IAAI,CAAEC,IAAI,IAAI;QAE/CC,MAAM,CAACC,IAAI,CAACF,IAAI,CAACG,KAAK,CAACC,YAAY,CAACD,KAAK,CAAC,CAACE,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,WAAW,EAAE,KAAKjB,GAAG,CAACiB,WAAW,EAAE,CAEzG;QAED,IAAIV,YAAY,EAAE;UAEhB,MAAMW,aAAa,GAAG;YAEpBL,KAAK,EAAE;cAELC,YAAY,EAAE;gBAEZD,KAAK,EAAE,GAAEN,YAAY,CAACM,KAAK,CAACC,YAAY,CAACD,KAAK,CAACb,GAAG,CAACiB,WAAW,EAAE,CAAC,IAAIV,YAAY,CAACM,KAAK,CAACC,YAAY,CAACD,KAAK,CAACb,GAAG,CAACmB,WAAW,EAAE,CAAE,IAAGlB,iBAAkB;cAErJ;YACF;UACF,CAAC;UAEDP,gBAAgB,CAAC0B,IAAI,CAACC,SAAS,CAACH,aAAa,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;UAExD1B,eAAe,CAAC,EAAE,CAAC;UAEnBF,aAAa,CAAC,EAAE,CAAC;QAGnB,CAAC,MAAI;UACHI,gBAAgB,CAAC,IAAI,CAAC;UAEtBF,eAAe,CAAC,eAAe,CAAC;QAClC;MAIF,CAAC,CAAE;IAEL,CAAC,CAAC,OAAO8B,KAAK,EAAE;MAEd5B,gBAAgB,CAAC,IAAI,CAAC;MAEtBF,eAAe,CAAC,uBAAuB,CAAC;IAC1C;EACF,CAAC;EAED,MAAM+B,iBAAiB,GAAGzB,CAAC,IAAG;IAE5BR,aAAa,CAACQ,CAAC,CAAC0B,MAAM,CAACC,KAAK,CAAC;EAE/B,CAAC;EAED,oBAEEvC,OAAA;IAAAwC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAEM;AAEV;AAACzC,EAAA,CA/EuBD,KAAK;AAAA2C,EAAA,GAAL3C,KAAK;AAAA,IAAA2C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}